# Script to make an eeprom image of the code generated by the emulator
from ast import arguments
import sys, getopt

# Costants
LOWER_BYTE_START_VECTOR_ADDRESS = 0x7FFC
UPPER_BYTE_START_VECTOR_ADDRESS = 0x7FFD
START_OPTION = "start="
OUT_OPTION = "out="
PATH_OPTION = "path="

# Variables
start_vector = 0x8000
output_file_name = "out.bin"
input_file_name = None

# Read the arguments
opts, args = getopt.getopt(sys.argv[1:], "", [START_OPTION, OUT_OPTION, PATH_OPTION])
# Cycle trough them and find the useful info
for arg in args:
    if START_OPTION in arg:
        start_vector = int(arg.split("=")[1], 0)
    elif OUT_OPTION in arg:
        output_file_name = arg.split("=")[1]
    elif PATH_OPTION in arg:
        input_file_name = arg.split("=")[1]
    
print(input_file_name, output_file_name, start_vector)

# Stop if no input file name has been specified
if input_file_name == None:
    print("No input_file_name has been specified. Please use \"path=\" to specify it")
    exit(-1)

# Open the file
input_file = open(input_file_name, "rb")
# Read it all
content = bytearray(input_file.read(-1))
# Close the input file
input_file.close()
# Truncate the array
new_content = content[start_vector:]
# Insert the special values for the starting vector
new_content[LOWER_BYTE_START_VECTOR_ADDRESS] = (start_vector & 0xFF)
new_content[UPPER_BYTE_START_VECTOR_ADDRESS] = ((start_vector & 0xFF00) >> 8)

# Create the new file
output_file = open(output_file_name, "wb")
output_file.write(bytes(new_content))
output_file.close()

exit(0)